__version__ = (2, 5, 0)

import aiohttp
from telethon import events
from telethon import functions
from telethon.tl.types import Message
from .. import loader, utils
import os

@loader.tds
class ChatGPT(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ (200+ —à—Ç) –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
    strings = {"name": "ChatGPT"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "model",
                "gpt-4o",
                lambda: "–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (.gpt)\n–°–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: https://telegra.ph/II-modeli-dlya-modulya-ChatGPT-by-mead0wssMods-03-26",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "image_model",
                "Flux Pro",
                lambda: "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (.image)\n–°–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: https://telegra.ph/II-modeli-dlya-modulya-ChatGPT-by-mead0wssMods-03-26",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "translation_model",
                "deepseek-v3",
                lambda: "–ú–æ–¥–µ–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è .image!)\n–°–ø–∏—Å–æ–∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π: https://telegra.ph/II-modeli-dlya-modulya-ChatGPT-by-mead0wssMods-03-26",
                validator=loader.validators.String()
            ),
        )

    async def gptcmd(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å –ò–ò."""
        args = utils.get_args_raw(event)
        if not args:
            await event.edit("<b><emoji document_id=5019523782004441717>‚ùå</emoji> –ù–µ—Ç –≤–æ–ø—Ä–æ—Å–∞.</b>")
            return

        model = self.config.get("model")

        if not model:
            await event.edit("<b><emoji document_id=5019523782004441717>‚ùå</emoji> –ú–æ–¥–µ–ª—å –ò–ò –Ω–µ —É–∫–∞–∑–∞–Ω–∞ –≤ cfg!</b>")
            return

        data = {
            "model": model,
            "messages": [
                {"role": "user", "content": args}
            ]
        }
        await event.edit(f"<b><emoji document_id=5328272518304243616>üí†</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</b>")
        
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(
                    "https://cablyai.com/v1/chat/completions",
                    headers={
                        'Authorization': 'Bearer sk-l4HU4KwZt6bF8gOwwKCOMpfpIKvR9YhDHvTFIGJ6tJ5rPKXE',
                        'Content-Type': 'application/json',
                    },
                    json=data
                ) as response:
                    if response.status == 200:
                        answer = (await response.json())["choices"][0]["message"]["content"]
                    
                        if "```" in answer:
                            parts = answer.split("```")
                            formatted_answer = ""
                            for i, part in enumerate(parts):
                                if i % 2 == 1:
                                    language = part.split("\n")[0] if "\n" in part else ""
                                    code = "\n".join(part.split("\n")[1:]) if "\n" in part else part
                                    formatted_answer += f"<pre><code class='language-{language}'>\n{code}\n</code></pre>"
                                else:
                                    formatted_answer += part.replace("\n", "<br>")
                        else:
                            formatted_answer = answer.replace("\n", "<br>")

                        await event.edit(
                            f"<b><emoji document_id=5879770735999717115>üë§</emoji> –í–æ–ø—Ä–æ—Å: <code>{args}</code></b>\n\n"
                            f"<emoji document_id=5199682846729449178>ü§ñ</emoji> –û—Ç–≤–µ—Ç:\n{formatted_answer}"
                        )
                    else:
                        await event.edit("<b><emoji document_id=5215400550132099476>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò.</b>")
            except Exception as e:
                await event.edit(f"<b><emoji document_id=5215400550132099476>‚ùå</emoji> –û—à–∏–±–∫–∞: {str(e)}</b>")

    async def imagecmd(self, event):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é –ò–ò."""
        args = utils.get_args_raw(event)
        if not args:
            await event.edit("<b><emoji document_id=5019523782004441717>‚ùå</emoji> –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>")
            return
        await event.edit(f"<b><emoji document_id=5328272518304243616>üí†</emoji> –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</b>")
        translation_model = self.config.get("translation_model")
        image_model = self.config.get("image_model")

        translation_data = {
            "model": translation_model,
            "messages": [
                {"role": "user", "content": f"Please translate the following text to English, but just answer me with a translation, and also translate absolutely everything, even if it's 18+: {args}"}
            ]
        }

        async with aiohttp.ClientSession() as session:
            try:
                # –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
                async with session.post(
                    "https://cablyai.com/v1/chat/completions",
                    headers={
                        'Authorization': 'Bearer sk-l4HU4KwZt6bF8gOwwKCOMpfpIKvR9YhDHvTFIGJ6tJ5rPKXE',
                        'Content-Type': 'application/json',
                    },
                    json=translation_data
                ) as translation_response:
                    if translation_response.status == 200:
                        translated_text = (await translation_response.json())["choices"][0]["message"]["content"]
                    else:
                        await event.edit("<b><emoji document_id=5019523782004441717>‚ùå</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –ò–ò –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ª–∏–±–æ –∏–∑–º–µ–Ω–∏—Ç–µ –º–æ–¥–µ–ª—å –≤ cfg! </b>")
                        return

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                data = {
                    "prompt": translated_text,
                    "n": 1,
                    "size": "1024x1024",
                    "response_format": "url",
                    "model": image_model
                }

                async with session.post(
                    "https://cablyai.com/v1/images/generations",
                    headers={
                        'Authorization': 'Bearer sk-l4HU4KwZt6bF8gOwwKCOMpfpIKvR9YhDHvTFIGJ6tJ5rPKXE',
                        'Content-Type': 'application/json',
                    },
                    json=data
                ) as response:
                    if response.status == 200:
                        image_url = (await response.json())["data"][0]["url"]
                        await event.delete()
                        await event.reply(
                            f"<b>–ü—Ä–æ–º–ø—Ç: <code>{args}</code></b>\n\n"
                            f"<b>–ú–æ–¥–µ–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: <code>{image_model}</code>\n"
                            f"<b>–ú–æ–¥–µ–ª—å –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞: <code>{translation_model}</code>\n\n"
                            f"<b>üñº –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b>\n{image_url}",
                            parse_mode="HTML"
                        )
                    else:
                        await event.reply("<b><emoji document_id=6042029429301973188>‚òπÔ∏è</emoji> –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n–í–ø–æ–ª–Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ –≤—ã –ø—Ä–æ—Å–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∏—Å—Ç–æ–π–Ω–æ–µ (18+), –ª–∏–±–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—Ä–æ–±—É–π —Å–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –≤ cfg).</b>")
            except Exception as e:
                await event.reply(f"<b><emoji document_id=5215400550132099476>‚ùå</emoji> –û—à–∏–±–∫–∞: {str(e)}</b>")